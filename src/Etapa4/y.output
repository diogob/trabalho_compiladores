Terminals which are not used

   VAZIO
   DIG
   OPCMP
   QUOTE
   DQUOTE
   BRANCO


State 1 conflicts: 1 shift/reduce
State 25 conflicts: 1 shift/reduce
State 64 conflicts: 4 shift/reduce
State 65 conflicts: 4 shift/reduce
State 66 conflicts: 4 shift/reduce
State 67 conflicts: 4 shift/reduce
State 74 conflicts: 2 shift/reduce
State 97 conflicts: 2 shift/reduce
State 98 conflicts: 2 shift/reduce


Grammar

    0 $accept: code $end

    1 code: decls action
    2     | action

    3 decls: decl
    4      | decls ';' decl

    5 decl: ident types

    6 ident: IDF ',' ident
    7      | IDF ':'

    8 types: type
    9      | type '[' type_array

   10 type: INT
   11     | DOUBLE
   12     | FLOAT
   13     | CHAR

   14 type_array: INT_LIT ':' INT_LIT ',' type_array
   15           | INT_LIT ':' INT_LIT ']'

   16 action: command
   17       | command ';' action
   18       | simple_enun action

   19 command: attr
   20        | simple_enun

   21 attr: lvalue '=' expr

   22 lvalue: IDF
   23       | IDF '[' expr_list

   24 expr_list: expr ',' expr_list
   25          | expr ']'

   26 expr: expr ADD expr
   27     | expr SUB expr
   28     | expr MUL expr
   29     | expr DIV expr
   30     | OPEN_PAR expr CLOSE_PAR
   31     | INT_LIT
   32     | F_LIT
   33     | lvalue
   34     | proc_call

   35 proc_call: IDF OPEN_PAR expr_list2

   36 expr_list2: expr ',' expr_list2
   37           | expr CLOSE_PAR

   38 simple_enun: expr
   39            | control_instr

   40 control_instr: if_expr
   41              | while_expr

   42 if_expr: IF OPEN_PAR bool_expr CLOSE_PAR THEN action if_end

   43 if_end: ELSE action END
   44       | END

   45 while_expr: WHILE OPEN_PAR bool_expr CLOSE_PAR '{' action '}'

   46 bool_expr: TRUE
   47          | FALSE
   48          | OPEN_PAR bool_expr CLOSE_PAR
   49          | bool_expr AND bool_expr
   50          | bool_expr OR bool_expr
   51          | expr '<' expr
   52          | expr '>' expr
   53          | expr LE expr
   54          | expr GE expr
   55          | expr EQ expr
   56          | expr NE expr
   57          | NOT bool_expr


Terminals, with rules where they appear

$end (0) 0
',' (44) 6 14 24 36
':' (58) 7 14 15
';' (59) 4 17
'<' (60) 51
'=' (61) 21
'>' (62) 52
'[' (91) 9 23
']' (93) 15 25
'{' (123) 45
'}' (125) 45
error (256)
IDF (258) 6 7 22 23 35
VAZIO (259)
OPEN_PAR (260) 30 35 42 45 48
CLOSE_PAR (261) 30 37 42 45 48
MUL (262) 28
ADD (263) 26
SUB (264) 27
DIV (265) 29
F_LIT (266) 32
INT_LIT (267) 14 15 31
DIG (268)
OPCMP (269)
INT (270) 10
DOUBLE (271) 11
FLOAT (272) 12
CHAR (273) 13
QUOTE (274)
DQUOTE (275)
LE (276) 53
GE (277) 54
EQ (278) 55
NE (279) 56
AND (280) 49
OR (281) 50
NOT (282) 57
IF (283) 42
THEN (284) 42
ELSE (285) 43
WHILE (286) 45
BRANCO (287)
END (288) 43 44
TRUE (289) 46
FALSE (290) 47


Nonterminals, with rules where they appear

$accept (46)
    on left: 0
code (47)
    on left: 1 2, on right: 0
decls (48)
    on left: 3 4, on right: 1 4
decl (49)
    on left: 5, on right: 3 4
ident (50)
    on left: 6 7, on right: 5 6
types (51)
    on left: 8 9, on right: 5
type (52)
    on left: 10 11 12 13, on right: 8 9
type_array (53)
    on left: 14 15, on right: 9 14
action (54)
    on left: 16 17 18, on right: 1 2 17 18 42 43 45
command (55)
    on left: 19 20, on right: 16 17
attr (56)
    on left: 21, on right: 19
lvalue (57)
    on left: 22 23, on right: 21 33
expr_list (58)
    on left: 24 25, on right: 23 24
expr (59)
    on left: 26 27 28 29 30 31 32 33 34, on right: 21 24 25 26 27 28
    29 30 36 37 38 51 52 53 54 55 56
proc_call (60)
    on left: 35, on right: 34
expr_list2 (61)
    on left: 36 37, on right: 35 36
simple_enun (62)
    on left: 38 39, on right: 18 20
control_instr (63)
    on left: 40 41, on right: 39
if_expr (64)
    on left: 42, on right: 40
if_end (65)
    on left: 43 44, on right: 42
while_expr (66)
    on left: 45, on right: 41
bool_expr (67)
    on left: 46 47 48 49 50 51 52 53 54 55 56 57, on right: 42 45 48
    49 50 57


state 0

    0 $accept: . code $end

    IDF       shift, and go to state 1
    OPEN_PAR  shift, and go to state 2
    F_LIT     shift, and go to state 3
    INT_LIT   shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6

    code           go to state 7
    decls          go to state 8
    decl           go to state 9
    ident          go to state 10
    action         go to state 11
    command        go to state 12
    attr           go to state 13
    lvalue         go to state 14
    expr           go to state 15
    proc_call      go to state 16
    simple_enun    go to state 17
    control_instr  go to state 18
    if_expr        go to state 19
    while_expr     go to state 20


state 1

    6 ident: IDF . ',' ident
    7      | IDF . ':'
   22 lvalue: IDF .
   23       | IDF . '[' expr_list
   35 proc_call: IDF . OPEN_PAR expr_list2

    OPEN_PAR  shift, and go to state 21
    ','       shift, and go to state 22
    ':'       shift, and go to state 23
    '['       shift, and go to state 24

    OPEN_PAR  [reduce using rule 22 (lvalue)]
    $default  reduce using rule 22 (lvalue)


state 2

   30 expr: OPEN_PAR . expr CLOSE_PAR

    IDF       shift, and go to state 25
    OPEN_PAR  shift, and go to state 2
    F_LIT     shift, and go to state 3
    INT_LIT   shift, and go to state 4

    lvalue     go to state 26
    expr       go to state 27
    proc_call  go to state 16


state 3

   32 expr: F_LIT .

    $default  reduce using rule 32 (expr)


state 4

   31 expr: INT_LIT .

    $default  reduce using rule 31 (expr)


state 5

   42 if_expr: IF . OPEN_PAR bool_expr CLOSE_PAR THEN action if_end

    OPEN_PAR  shift, and go to state 28


state 6

   45 while_expr: WHILE . OPEN_PAR bool_expr CLOSE_PAR '{' action '}'

    OPEN_PAR  shift, and go to state 29


state 7

    0 $accept: code . $end

    $end  shift, and go to state 30


state 8

    1 code: decls . action
    4 decls: decls . ';' decl

    IDF       shift, and go to state 25
    OPEN_PAR  shift, and go to state 2
    F_LIT     shift, and go to state 3
    INT_LIT   shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    ';'       shift, and go to state 31

    action         go to state 32
    command        go to state 12
    attr           go to state 13
    lvalue         go to state 14
    expr           go to state 15
    proc_call      go to state 16
    simple_enun    go to state 17
    control_instr  go to state 18
    if_expr        go to state 19
    while_expr     go to state 20


state 9

    3 decls: decl .

    $default  reduce using rule 3 (decls)


state 10

    5 decl: ident . types

    INT     shift, and go to state 33
    DOUBLE  shift, and go to state 34
    FLOAT   shift, and go to state 35
    CHAR    shift, and go to state 36

    types  go to state 37
    type   go to state 38


state 11

    2 code: action .

    $default  reduce using rule 2 (code)


state 12

   16 action: command .
   17       | command . ';' action

    ';'  shift, and go to state 39

    $default  reduce using rule 16 (action)


state 13

   19 command: attr .

    $default  reduce using rule 19 (command)


state 14

   21 attr: lvalue . '=' expr
   33 expr: lvalue .

    '='  shift, and go to state 40

    $default  reduce using rule 33 (expr)


state 15

   26 expr: expr . ADD expr
   27     | expr . SUB expr
   28     | expr . MUL expr
   29     | expr . DIV expr
   38 simple_enun: expr .

    MUL  shift, and go to state 41
    ADD  shift, and go to state 42
    SUB  shift, and go to state 43
    DIV  shift, and go to state 44

    $default  reduce using rule 38 (simple_enun)


state 16

   34 expr: proc_call .

    $default  reduce using rule 34 (expr)


state 17

   18 action: simple_enun . action
   20 command: simple_enun .

    IDF       shift, and go to state 25
    OPEN_PAR  shift, and go to state 2
    F_LIT     shift, and go to state 3
    INT_LIT   shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6

    $default  reduce using rule 20 (command)

    action         go to state 45
    command        go to state 12
    attr           go to state 13
    lvalue         go to state 14
    expr           go to state 15
    proc_call      go to state 16
    simple_enun    go to state 17
    control_instr  go to state 18
    if_expr        go to state 19
    while_expr     go to state 20


state 18

   39 simple_enun: control_instr .

    $default  reduce using rule 39 (simple_enun)


state 19

   40 control_instr: if_expr .

    $default  reduce using rule 40 (control_instr)


state 20

   41 control_instr: while_expr .

    $default  reduce using rule 41 (control_instr)


state 21

   35 proc_call: IDF OPEN_PAR . expr_list2

    IDF       shift, and go to state 25
    OPEN_PAR  shift, and go to state 2
    F_LIT     shift, and go to state 3
    INT_LIT   shift, and go to state 4

    lvalue      go to state 26
    expr        go to state 46
    proc_call   go to state 16
    expr_list2  go to state 47


state 22

    6 ident: IDF ',' . ident

    IDF  shift, and go to state 48

    ident  go to state 49


state 23

    7 ident: IDF ':' .

    $default  reduce using rule 7 (ident)


state 24

   23 lvalue: IDF '[' . expr_list

    IDF       shift, and go to state 25
    OPEN_PAR  shift, and go to state 2
    F_LIT     shift, and go to state 3
    INT_LIT   shift, and go to state 4

    lvalue     go to state 26
    expr_list  go to state 50
    expr       go to state 51
    proc_call  go to state 16


state 25

   22 lvalue: IDF .
   23       | IDF . '[' expr_list
   35 proc_call: IDF . OPEN_PAR expr_list2

    OPEN_PAR  shift, and go to state 21
    '['       shift, and go to state 24

    OPEN_PAR  [reduce using rule 22 (lvalue)]
    $default  reduce using rule 22 (lvalue)


state 26

   33 expr: lvalue .

    $default  reduce using rule 33 (expr)


state 27

   26 expr: expr . ADD expr
   27     | expr . SUB expr
   28     | expr . MUL expr
   29     | expr . DIV expr
   30     | OPEN_PAR expr . CLOSE_PAR

    CLOSE_PAR  shift, and go to state 52
    MUL        shift, and go to state 41
    ADD        shift, and go to state 42
    SUB        shift, and go to state 43
    DIV        shift, and go to state 44


state 28

   42 if_expr: IF OPEN_PAR . bool_expr CLOSE_PAR THEN action if_end

    IDF       shift, and go to state 25
    OPEN_PAR  shift, and go to state 53
    F_LIT     shift, and go to state 3
    INT_LIT   shift, and go to state 4
    NOT       shift, and go to state 54
    TRUE      shift, and go to state 55
    FALSE     shift, and go to state 56

    lvalue     go to state 26
    expr       go to state 57
    proc_call  go to state 16
    bool_expr  go to state 58


state 29

   45 while_expr: WHILE OPEN_PAR . bool_expr CLOSE_PAR '{' action '}'

    IDF       shift, and go to state 25
    OPEN_PAR  shift, and go to state 53
    F_LIT     shift, and go to state 3
    INT_LIT   shift, and go to state 4
    NOT       shift, and go to state 54
    TRUE      shift, and go to state 55
    FALSE     shift, and go to state 56

    lvalue     go to state 26
    expr       go to state 57
    proc_call  go to state 16
    bool_expr  go to state 59


state 30

    0 $accept: code $end .

    $default  accept


state 31

    4 decls: decls ';' . decl

    IDF  shift, and go to state 48

    decl   go to state 60
    ident  go to state 10


state 32

    1 code: decls action .

    $default  reduce using rule 1 (code)


state 33

   10 type: INT .

    $default  reduce using rule 10 (type)


state 34

   11 type: DOUBLE .

    $default  reduce using rule 11 (type)


state 35

   12 type: FLOAT .

    $default  reduce using rule 12 (type)


state 36

   13 type: CHAR .

    $default  reduce using rule 13 (type)


state 37

    5 decl: ident types .

    $default  reduce using rule 5 (decl)


state 38

    8 types: type .
    9      | type . '[' type_array

    '['  shift, and go to state 61

    $default  reduce using rule 8 (types)


state 39

   17 action: command ';' . action

    IDF       shift, and go to state 25
    OPEN_PAR  shift, and go to state 2
    F_LIT     shift, and go to state 3
    INT_LIT   shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6

    action         go to state 62
    command        go to state 12
    attr           go to state 13
    lvalue         go to state 14
    expr           go to state 15
    proc_call      go to state 16
    simple_enun    go to state 17
    control_instr  go to state 18
    if_expr        go to state 19
    while_expr     go to state 20


state 40

   21 attr: lvalue '=' . expr

    IDF       shift, and go to state 25
    OPEN_PAR  shift, and go to state 2
    F_LIT     shift, and go to state 3
    INT_LIT   shift, and go to state 4

    lvalue     go to state 26
    expr       go to state 63
    proc_call  go to state 16


state 41

   28 expr: expr MUL . expr

    IDF       shift, and go to state 25
    OPEN_PAR  shift, and go to state 2
    F_LIT     shift, and go to state 3
    INT_LIT   shift, and go to state 4

    lvalue     go to state 26
    expr       go to state 64
    proc_call  go to state 16


state 42

   26 expr: expr ADD . expr

    IDF       shift, and go to state 25
    OPEN_PAR  shift, and go to state 2
    F_LIT     shift, and go to state 3
    INT_LIT   shift, and go to state 4

    lvalue     go to state 26
    expr       go to state 65
    proc_call  go to state 16


state 43

   27 expr: expr SUB . expr

    IDF       shift, and go to state 25
    OPEN_PAR  shift, and go to state 2
    F_LIT     shift, and go to state 3
    INT_LIT   shift, and go to state 4

    lvalue     go to state 26
    expr       go to state 66
    proc_call  go to state 16


state 44

   29 expr: expr DIV . expr

    IDF       shift, and go to state 25
    OPEN_PAR  shift, and go to state 2
    F_LIT     shift, and go to state 3
    INT_LIT   shift, and go to state 4

    lvalue     go to state 26
    expr       go to state 67
    proc_call  go to state 16


state 45

   18 action: simple_enun action .

    $default  reduce using rule 18 (action)


state 46

   26 expr: expr . ADD expr
   27     | expr . SUB expr
   28     | expr . MUL expr
   29     | expr . DIV expr
   36 expr_list2: expr . ',' expr_list2
   37           | expr . CLOSE_PAR

    CLOSE_PAR  shift, and go to state 68
    MUL        shift, and go to state 41
    ADD        shift, and go to state 42
    SUB        shift, and go to state 43
    DIV        shift, and go to state 44
    ','        shift, and go to state 69


state 47

   35 proc_call: IDF OPEN_PAR expr_list2 .

    $default  reduce using rule 35 (proc_call)


state 48

    6 ident: IDF . ',' ident
    7      | IDF . ':'

    ','  shift, and go to state 22
    ':'  shift, and go to state 23


state 49

    6 ident: IDF ',' ident .

    $default  reduce using rule 6 (ident)


state 50

   23 lvalue: IDF '[' expr_list .

    $default  reduce using rule 23 (lvalue)


state 51

   24 expr_list: expr . ',' expr_list
   25          | expr . ']'
   26 expr: expr . ADD expr
   27     | expr . SUB expr
   28     | expr . MUL expr
   29     | expr . DIV expr

    MUL  shift, and go to state 41
    ADD  shift, and go to state 42
    SUB  shift, and go to state 43
    DIV  shift, and go to state 44
    ','  shift, and go to state 70
    ']'  shift, and go to state 71


state 52

   30 expr: OPEN_PAR expr CLOSE_PAR .

    $default  reduce using rule 30 (expr)


state 53

   30 expr: OPEN_PAR . expr CLOSE_PAR
   48 bool_expr: OPEN_PAR . bool_expr CLOSE_PAR

    IDF       shift, and go to state 25
    OPEN_PAR  shift, and go to state 53
    F_LIT     shift, and go to state 3
    INT_LIT   shift, and go to state 4
    NOT       shift, and go to state 54
    TRUE      shift, and go to state 55
    FALSE     shift, and go to state 56

    lvalue     go to state 26
    expr       go to state 72
    proc_call  go to state 16
    bool_expr  go to state 73


state 54

   57 bool_expr: NOT . bool_expr

    IDF       shift, and go to state 25
    OPEN_PAR  shift, and go to state 53
    F_LIT     shift, and go to state 3
    INT_LIT   shift, and go to state 4
    NOT       shift, and go to state 54
    TRUE      shift, and go to state 55
    FALSE     shift, and go to state 56

    lvalue     go to state 26
    expr       go to state 57
    proc_call  go to state 16
    bool_expr  go to state 74


state 55

   46 bool_expr: TRUE .

    $default  reduce using rule 46 (bool_expr)


state 56

   47 bool_expr: FALSE .

    $default  reduce using rule 47 (bool_expr)


state 57

   26 expr: expr . ADD expr
   27     | expr . SUB expr
   28     | expr . MUL expr
   29     | expr . DIV expr
   51 bool_expr: expr . '<' expr
   52          | expr . '>' expr
   53          | expr . LE expr
   54          | expr . GE expr
   55          | expr . EQ expr
   56          | expr . NE expr

    MUL  shift, and go to state 41
    ADD  shift, and go to state 42
    SUB  shift, and go to state 43
    DIV  shift, and go to state 44
    LE   shift, and go to state 75
    GE   shift, and go to state 76
    EQ   shift, and go to state 77
    NE   shift, and go to state 78
    '<'  shift, and go to state 79
    '>'  shift, and go to state 80


state 58

   42 if_expr: IF OPEN_PAR bool_expr . CLOSE_PAR THEN action if_end
   49 bool_expr: bool_expr . AND bool_expr
   50          | bool_expr . OR bool_expr

    CLOSE_PAR  shift, and go to state 81
    AND        shift, and go to state 82
    OR         shift, and go to state 83


state 59

   45 while_expr: WHILE OPEN_PAR bool_expr . CLOSE_PAR '{' action '}'
   49 bool_expr: bool_expr . AND bool_expr
   50          | bool_expr . OR bool_expr

    CLOSE_PAR  shift, and go to state 84
    AND        shift, and go to state 82
    OR         shift, and go to state 83


state 60

    4 decls: decls ';' decl .

    $default  reduce using rule 4 (decls)


state 61

    9 types: type '[' . type_array

    INT_LIT  shift, and go to state 85

    type_array  go to state 86


state 62

   17 action: command ';' action .

    $default  reduce using rule 17 (action)


state 63

   21 attr: lvalue '=' expr .
   26 expr: expr . ADD expr
   27     | expr . SUB expr
   28     | expr . MUL expr
   29     | expr . DIV expr

    MUL  shift, and go to state 41
    ADD  shift, and go to state 42
    SUB  shift, and go to state 43
    DIV  shift, and go to state 44

    $default  reduce using rule 21 (attr)


state 64

   26 expr: expr . ADD expr
   27     | expr . SUB expr
   28     | expr . MUL expr
   28     | expr MUL expr .
   29     | expr . DIV expr

    MUL  shift, and go to state 41
    ADD  shift, and go to state 42
    SUB  shift, and go to state 43
    DIV  shift, and go to state 44

    MUL       [reduce using rule 28 (expr)]
    ADD       [reduce using rule 28 (expr)]
    SUB       [reduce using rule 28 (expr)]
    DIV       [reduce using rule 28 (expr)]
    $default  reduce using rule 28 (expr)


state 65

   26 expr: expr . ADD expr
   26     | expr ADD expr .
   27     | expr . SUB expr
   28     | expr . MUL expr
   29     | expr . DIV expr

    MUL  shift, and go to state 41
    ADD  shift, and go to state 42
    SUB  shift, and go to state 43
    DIV  shift, and go to state 44

    MUL       [reduce using rule 26 (expr)]
    ADD       [reduce using rule 26 (expr)]
    SUB       [reduce using rule 26 (expr)]
    DIV       [reduce using rule 26 (expr)]
    $default  reduce using rule 26 (expr)


state 66

   26 expr: expr . ADD expr
   27     | expr . SUB expr
   27     | expr SUB expr .
   28     | expr . MUL expr
   29     | expr . DIV expr

    MUL  shift, and go to state 41
    ADD  shift, and go to state 42
    SUB  shift, and go to state 43
    DIV  shift, and go to state 44

    MUL       [reduce using rule 27 (expr)]
    ADD       [reduce using rule 27 (expr)]
    SUB       [reduce using rule 27 (expr)]
    DIV       [reduce using rule 27 (expr)]
    $default  reduce using rule 27 (expr)


state 67

   26 expr: expr . ADD expr
   27     | expr . SUB expr
   28     | expr . MUL expr
   29     | expr . DIV expr
   29     | expr DIV expr .

    MUL  shift, and go to state 41
    ADD  shift, and go to state 42
    SUB  shift, and go to state 43
    DIV  shift, and go to state 44

    MUL       [reduce using rule 29 (expr)]
    ADD       [reduce using rule 29 (expr)]
    SUB       [reduce using rule 29 (expr)]
    DIV       [reduce using rule 29 (expr)]
    $default  reduce using rule 29 (expr)


state 68

   37 expr_list2: expr CLOSE_PAR .

    $default  reduce using rule 37 (expr_list2)


state 69

   36 expr_list2: expr ',' . expr_list2

    IDF       shift, and go to state 25
    OPEN_PAR  shift, and go to state 2
    F_LIT     shift, and go to state 3
    INT_LIT   shift, and go to state 4

    lvalue      go to state 26
    expr        go to state 46
    proc_call   go to state 16
    expr_list2  go to state 87


state 70

   24 expr_list: expr ',' . expr_list

    IDF       shift, and go to state 25
    OPEN_PAR  shift, and go to state 2
    F_LIT     shift, and go to state 3
    INT_LIT   shift, and go to state 4

    lvalue     go to state 26
    expr_list  go to state 88
    expr       go to state 51
    proc_call  go to state 16


state 71

   25 expr_list: expr ']' .

    $default  reduce using rule 25 (expr_list)


state 72

   26 expr: expr . ADD expr
   27     | expr . SUB expr
   28     | expr . MUL expr
   29     | expr . DIV expr
   30     | OPEN_PAR expr . CLOSE_PAR
   51 bool_expr: expr . '<' expr
   52          | expr . '>' expr
   53          | expr . LE expr
   54          | expr . GE expr
   55          | expr . EQ expr
   56          | expr . NE expr

    CLOSE_PAR  shift, and go to state 52
    MUL        shift, and go to state 41
    ADD        shift, and go to state 42
    SUB        shift, and go to state 43
    DIV        shift, and go to state 44
    LE         shift, and go to state 75
    GE         shift, and go to state 76
    EQ         shift, and go to state 77
    NE         shift, and go to state 78
    '<'        shift, and go to state 79
    '>'        shift, and go to state 80


state 73

   48 bool_expr: OPEN_PAR bool_expr . CLOSE_PAR
   49          | bool_expr . AND bool_expr
   50          | bool_expr . OR bool_expr

    CLOSE_PAR  shift, and go to state 89
    AND        shift, and go to state 82
    OR         shift, and go to state 83


state 74

   49 bool_expr: bool_expr . AND bool_expr
   50          | bool_expr . OR bool_expr
   57          | NOT bool_expr .

    AND  shift, and go to state 82
    OR   shift, and go to state 83

    AND       [reduce using rule 57 (bool_expr)]
    OR        [reduce using rule 57 (bool_expr)]
    $default  reduce using rule 57 (bool_expr)


state 75

   53 bool_expr: expr LE . expr

    IDF       shift, and go to state 25
    OPEN_PAR  shift, and go to state 2
    F_LIT     shift, and go to state 3
    INT_LIT   shift, and go to state 4

    lvalue     go to state 26
    expr       go to state 90
    proc_call  go to state 16


state 76

   54 bool_expr: expr GE . expr

    IDF       shift, and go to state 25
    OPEN_PAR  shift, and go to state 2
    F_LIT     shift, and go to state 3
    INT_LIT   shift, and go to state 4

    lvalue     go to state 26
    expr       go to state 91
    proc_call  go to state 16


state 77

   55 bool_expr: expr EQ . expr

    IDF       shift, and go to state 25
    OPEN_PAR  shift, and go to state 2
    F_LIT     shift, and go to state 3
    INT_LIT   shift, and go to state 4

    lvalue     go to state 26
    expr       go to state 92
    proc_call  go to state 16


state 78

   56 bool_expr: expr NE . expr

    IDF       shift, and go to state 25
    OPEN_PAR  shift, and go to state 2
    F_LIT     shift, and go to state 3
    INT_LIT   shift, and go to state 4

    lvalue     go to state 26
    expr       go to state 93
    proc_call  go to state 16


state 79

   51 bool_expr: expr '<' . expr

    IDF       shift, and go to state 25
    OPEN_PAR  shift, and go to state 2
    F_LIT     shift, and go to state 3
    INT_LIT   shift, and go to state 4

    lvalue     go to state 26
    expr       go to state 94
    proc_call  go to state 16


state 80

   52 bool_expr: expr '>' . expr

    IDF       shift, and go to state 25
    OPEN_PAR  shift, and go to state 2
    F_LIT     shift, and go to state 3
    INT_LIT   shift, and go to state 4

    lvalue     go to state 26
    expr       go to state 95
    proc_call  go to state 16


state 81

   42 if_expr: IF OPEN_PAR bool_expr CLOSE_PAR . THEN action if_end

    THEN  shift, and go to state 96


state 82

   49 bool_expr: bool_expr AND . bool_expr

    IDF       shift, and go to state 25
    OPEN_PAR  shift, and go to state 53
    F_LIT     shift, and go to state 3
    INT_LIT   shift, and go to state 4
    NOT       shift, and go to state 54
    TRUE      shift, and go to state 55
    FALSE     shift, and go to state 56

    lvalue     go to state 26
    expr       go to state 57
    proc_call  go to state 16
    bool_expr  go to state 97


state 83

   50 bool_expr: bool_expr OR . bool_expr

    IDF       shift, and go to state 25
    OPEN_PAR  shift, and go to state 53
    F_LIT     shift, and go to state 3
    INT_LIT   shift, and go to state 4
    NOT       shift, and go to state 54
    TRUE      shift, and go to state 55
    FALSE     shift, and go to state 56

    lvalue     go to state 26
    expr       go to state 57
    proc_call  go to state 16
    bool_expr  go to state 98


state 84

   45 while_expr: WHILE OPEN_PAR bool_expr CLOSE_PAR . '{' action '}'

    '{'  shift, and go to state 99


state 85

   14 type_array: INT_LIT . ':' INT_LIT ',' type_array
   15           | INT_LIT . ':' INT_LIT ']'

    ':'  shift, and go to state 100


state 86

    9 types: type '[' type_array .

    $default  reduce using rule 9 (types)


state 87

   36 expr_list2: expr ',' expr_list2 .

    $default  reduce using rule 36 (expr_list2)


state 88

   24 expr_list: expr ',' expr_list .

    $default  reduce using rule 24 (expr_list)


state 89

   48 bool_expr: OPEN_PAR bool_expr CLOSE_PAR .

    $default  reduce using rule 48 (bool_expr)


state 90

   26 expr: expr . ADD expr
   27     | expr . SUB expr
   28     | expr . MUL expr
   29     | expr . DIV expr
   53 bool_expr: expr LE expr .

    MUL  shift, and go to state 41
    ADD  shift, and go to state 42
    SUB  shift, and go to state 43
    DIV  shift, and go to state 44

    $default  reduce using rule 53 (bool_expr)


state 91

   26 expr: expr . ADD expr
   27     | expr . SUB expr
   28     | expr . MUL expr
   29     | expr . DIV expr
   54 bool_expr: expr GE expr .

    MUL  shift, and go to state 41
    ADD  shift, and go to state 42
    SUB  shift, and go to state 43
    DIV  shift, and go to state 44

    $default  reduce using rule 54 (bool_expr)


state 92

   26 expr: expr . ADD expr
   27     | expr . SUB expr
   28     | expr . MUL expr
   29     | expr . DIV expr
   55 bool_expr: expr EQ expr .

    MUL  shift, and go to state 41
    ADD  shift, and go to state 42
    SUB  shift, and go to state 43
    DIV  shift, and go to state 44

    $default  reduce using rule 55 (bool_expr)


state 93

   26 expr: expr . ADD expr
   27     | expr . SUB expr
   28     | expr . MUL expr
   29     | expr . DIV expr
   56 bool_expr: expr NE expr .

    MUL  shift, and go to state 41
    ADD  shift, and go to state 42
    SUB  shift, and go to state 43
    DIV  shift, and go to state 44

    $default  reduce using rule 56 (bool_expr)


state 94

   26 expr: expr . ADD expr
   27     | expr . SUB expr
   28     | expr . MUL expr
   29     | expr . DIV expr
   51 bool_expr: expr '<' expr .

    MUL  shift, and go to state 41
    ADD  shift, and go to state 42
    SUB  shift, and go to state 43
    DIV  shift, and go to state 44

    $default  reduce using rule 51 (bool_expr)


state 95

   26 expr: expr . ADD expr
   27     | expr . SUB expr
   28     | expr . MUL expr
   29     | expr . DIV expr
   52 bool_expr: expr '>' expr .

    MUL  shift, and go to state 41
    ADD  shift, and go to state 42
    SUB  shift, and go to state 43
    DIV  shift, and go to state 44

    $default  reduce using rule 52 (bool_expr)


state 96

   42 if_expr: IF OPEN_PAR bool_expr CLOSE_PAR THEN . action if_end

    IDF       shift, and go to state 25
    OPEN_PAR  shift, and go to state 2
    F_LIT     shift, and go to state 3
    INT_LIT   shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6

    action         go to state 101
    command        go to state 12
    attr           go to state 13
    lvalue         go to state 14
    expr           go to state 15
    proc_call      go to state 16
    simple_enun    go to state 17
    control_instr  go to state 18
    if_expr        go to state 19
    while_expr     go to state 20


state 97

   49 bool_expr: bool_expr . AND bool_expr
   49          | bool_expr AND bool_expr .
   50          | bool_expr . OR bool_expr

    AND  shift, and go to state 82
    OR   shift, and go to state 83

    AND       [reduce using rule 49 (bool_expr)]
    OR        [reduce using rule 49 (bool_expr)]
    $default  reduce using rule 49 (bool_expr)


state 98

   49 bool_expr: bool_expr . AND bool_expr
   50          | bool_expr . OR bool_expr
   50          | bool_expr OR bool_expr .

    AND  shift, and go to state 82
    OR   shift, and go to state 83

    AND       [reduce using rule 50 (bool_expr)]
    OR        [reduce using rule 50 (bool_expr)]
    $default  reduce using rule 50 (bool_expr)


state 99

   45 while_expr: WHILE OPEN_PAR bool_expr CLOSE_PAR '{' . action '}'

    IDF       shift, and go to state 25
    OPEN_PAR  shift, and go to state 2
    F_LIT     shift, and go to state 3
    INT_LIT   shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6

    action         go to state 102
    command        go to state 12
    attr           go to state 13
    lvalue         go to state 14
    expr           go to state 15
    proc_call      go to state 16
    simple_enun    go to state 17
    control_instr  go to state 18
    if_expr        go to state 19
    while_expr     go to state 20


state 100

   14 type_array: INT_LIT ':' . INT_LIT ',' type_array
   15           | INT_LIT ':' . INT_LIT ']'

    INT_LIT  shift, and go to state 103


state 101

   42 if_expr: IF OPEN_PAR bool_expr CLOSE_PAR THEN action . if_end

    ELSE  shift, and go to state 104
    END   shift, and go to state 105

    if_end  go to state 106


state 102

   45 while_expr: WHILE OPEN_PAR bool_expr CLOSE_PAR '{' action . '}'

    '}'  shift, and go to state 107


state 103

   14 type_array: INT_LIT ':' INT_LIT . ',' type_array
   15           | INT_LIT ':' INT_LIT . ']'

    ','  shift, and go to state 108
    ']'  shift, and go to state 109


state 104

   43 if_end: ELSE . action END

    IDF       shift, and go to state 25
    OPEN_PAR  shift, and go to state 2
    F_LIT     shift, and go to state 3
    INT_LIT   shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6

    action         go to state 110
    command        go to state 12
    attr           go to state 13
    lvalue         go to state 14
    expr           go to state 15
    proc_call      go to state 16
    simple_enun    go to state 17
    control_instr  go to state 18
    if_expr        go to state 19
    while_expr     go to state 20


state 105

   44 if_end: END .

    $default  reduce using rule 44 (if_end)


state 106

   42 if_expr: IF OPEN_PAR bool_expr CLOSE_PAR THEN action if_end .

    $default  reduce using rule 42 (if_expr)


state 107

   45 while_expr: WHILE OPEN_PAR bool_expr CLOSE_PAR '{' action '}' .

    $default  reduce using rule 45 (while_expr)


state 108

   14 type_array: INT_LIT ':' INT_LIT ',' . type_array

    INT_LIT  shift, and go to state 85

    type_array  go to state 111


state 109

   15 type_array: INT_LIT ':' INT_LIT ']' .

    $default  reduce using rule 15 (type_array)


state 110

   43 if_end: ELSE action . END

    END  shift, and go to state 112


state 111

   14 type_array: INT_LIT ':' INT_LIT ',' type_array .

    $default  reduce using rule 14 (type_array)


state 112

   43 if_end: ELSE action END .

    $default  reduce using rule 43 (if_end)
